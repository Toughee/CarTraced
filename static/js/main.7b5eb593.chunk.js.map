{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["imgTraceModel","state","isTfReady","isModelReady","classification","image","a","tf","this","setState","mobilenet","model","className","type","accept","capture","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kbAiFeA,E,4MAzEbC,MAAQ,CACNC,WAAW,EACXC,cAAc,EACdC,eAAgB,KAChBC,MAAO,M,8FAGT,sBAAAC,EAAA,sEACQC,MADR,cAEEC,KAAKC,SAAS,CACZP,WAAW,IAHf,SAMqBQ,MANrB,OAMEF,KAAKG,MANP,OAOEH,KAAKC,SAAS,CAAEN,cAAc,IAPhC,gD,0EAqBF,WACE,OACE,sBAAKS,UAAU,YAAf,UACE,mCACM,2CACA,qFAEN,uBACL,0BAASA,UAAU,eAAnB,UACA,kCACA,oDACO,iCACI,uBACAC,KAAK,OACLC,OAAO,UACPC,QAAQ,aAIZ,6CACA,6CACA,gDACA,gDAMI,oC,GAzDgBC,IAAMC,WCKnBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7b5eb593.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\n// import red from './red.jpeg';\n// import { useState } from \"react\";\nimport * as tf from '@tensorflow/tfjs'\nimport * as mobilenet from '@tensorflow-models/mobilenet'\n\nclass imgTraceModel extends React.Component {\n  state = {\n    isTfReady: false,\n    isModelReady: false,\n    classification: null,\n    image: null\n  }\n\n  async componentDidMount() {\n    await tf.ready()\n    this.setState({\n      isTfReady: true\n    })\n\n    this.model = await mobilenet.load()\n    this.setState({ isModelReady: true })\n  }\n\n// const classifierCateg = async() => {\n//  await model.classify(img);\n// }\n//const classifierCateg = \"test\";\n// console.log(classifierCateg);\n// console.log('classifierCateg: ');\n\n// const [imgloc, setimgloc] = useState(null);\n// const imgUpload = event => { \n//   const { files } = event.target;\n// }\nrender() {\n  return (\n    <div className=\"container\">\n      <header>\n            <h1>CarTraced</h1>\n            <h2>Classify car models and details using tensorflow</h2>\n      </header>\n      <br/>\n <article className=\"dataSection \">\n <aside>\n <button>Models loaded </button>\n        <button>\n            <input\n            type=\"file\"\n            accept=\"image/*\"\n            capture=\"camera\"\n            // onChange={imgUpload}\n          />\n        </button>\n        <button>Make:  </button>\n        <button>Model: </button>\n        <button>Car Type: </button>\n        <button>Color: </button>\n        \n</aside>\n        {/* <img\n              src={picupload}\n            /> */}\n            <aside>\n                    {/* <img\n              src={red}\n            /> */}\n            </aside>\n        {/* <p>{Classifier category: Make:}</p> */}\n        {/* <p>{Classifier category: Model:}</p> */}\n        {/* <p>{Classifier category: CarType:}</p> */}\n        {/* <p>{Classifier category: Color}</p> */}\n\n        </article>\n\n      </div>\n      )\n    }\n}\n\nexport default imgTraceModel\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}